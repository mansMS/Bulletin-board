{"version":3,"sources":["phoneIcon.svg","questionIcon.svg","checkIcon.svg","exclamationIcon.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","TodoApp","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","localStorage","setItem","JSON","stringify","locStorItems","parse","getItem","state","items","headline","text","phone","formErrors","headlineValid","textValid","phoneValid","formValid","icons","","questionIcon","true","checkIcon","false","exclamationIcon","phoneIcon","hintColor","fieldColor","handleAdvertInput","bind","assertThisInitialized","handleSubmit","deleteAdvert","react_default","a","createElement","className","onSubmit","htmlFor","id","name","maxLength","style","borderColor","onChange","value","src","color","rows","number_format_default","format","mask","placeholder","type","App_ListHeader","App_TodoList","e","target","setState","defineProperty","validObj","length","fieldValidationErrors","console","log","preventDefault","validInfo","validate","newItem","Date","now","push","i","splice","React","Component","ListHeader","TodoList","_this2","slice","reverse","map","item","key","onClick","handleDeleteAdvert","App","App_TodoApp","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.84232aaa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/phoneIcon.7b2da63f.svg\";","module.exports = __webpack_public_path__ + \"static/media/questionIcon.c5e54c1d.svg\";","module.exports = __webpack_public_path__ + \"static/media/checkIcon.bab76559.svg\";","module.exports = __webpack_public_path__ + \"static/media/exclamationIcon.2824febb.svg\";","import React from 'react';\nimport questionIcon from './questionIcon.svg';\nimport checkIcon from './checkIcon.svg';\nimport exclamationIcon from './exclamationIcon.svg';\nimport phoneIcon from './phoneIcon.svg';\nimport './App.css';\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport NumberFormat from 'react-number-format';\n\nclass TodoApp extends React.Component {\n  constructor(props) {\n    super(props);\n    // localStorage.clear();\n\n    if (!localStorage[\"items\"]) {\n      localStorage.setItem(\"items\", JSON.stringify([]));\n    }\n    var locStorItems = JSON.parse(localStorage.getItem(\"items\")) || [];\n\n    this.state = {\n      items: locStorItems,\n      headline: '',\n      text: '',\n      phone: '',\n      formErrors: {\n        headline: 'Обязательное поле\\nНе более 140 символов', \n        text: 'Не более 300 символов', \n        phone: 'Обязательное поле'\n      },\n      headlineValid: '',\n      textValid: '',\n      phoneValid: '',\n      formValid: false,\n      icons: {\n        '': questionIcon,\n        true: checkIcon,\n        false: exclamationIcon,\n        phoneIcon: phoneIcon\n      },\n      hintColor: {\n        '': '#68717c',\n        true: '#16c98d',\n        false: '#fa5e5b'\n      },\n      fieldColor: {\n        '': '#68717c',\n        true: '#68717c',\n        false: '#fa5e5b'\n      }\n    };\n\n    this.handleAdvertInput = this.handleAdvertInput.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.deleteAdvert = this.deleteAdvert.bind(this);\n  }\n\n  render() {\n    return (\n      <div className=\"content\">\n        <h4 className=\"header\">Подать объявление</h4>\n        <form onSubmit={this.handleSubmit}>\n\n          <div className=\"form-element form-group-headline\">\n            <label className=\"field-header\" htmlFor=\"newHeadline\">Заголовок</label>\n            <input className=\"field\" id=\"newHeadline\" name=\"headline\" maxLength=\"140\" \n              style={{borderColor: this.state.fieldColor[this.state.headlineValid]}}\n              onChange={this.handleAdvertInput} value={this.state.headline} />\n            <div className=\"hint\">\n              <img src={this.state.icons[this.state.headlineValid]} />\n              <label style={{color: this.state.hintColor[this.state.headlineValid]}} \n                htmlFor=\"newHeadline\">{this.state.formErrors[\"headline\"]}</label>\n            </div>\n          </div>\n\n          <div className=\"form-element\">\n            <label className=\"field-header\" htmlFor=\"newText\">Текст объявления</label>\n            <textarea className=\"field\" rows=\"5\" id=\"newText\" name=\"text\" maxLength=\"500\"\n              style={{borderColor: this.state.fieldColor[this.state.textValid]}}\n              onChange={this.handleAdvertInput} value={this.state.text}>\n            </textarea>\n            <div className=\"hint\">\n              <img src={this.state.icons[this.state.textValid]} />\n              <label style={{color: this.state.hintColor[this.state.textValid]}}\n                htmlFor=\"newText\">{this.state.formErrors[\"text\"]}</label>\n            </div>\n          </div>\n\n          <div className=\"form-element\">\n            <label className=\"field-header\" htmlFor=\"newPhone\">Телефон</label>\n            <NumberFormat className = \"field\" id=\"newPhone\" name=\"phone\" format=\"+7 (###) ###-##-##\" mask=\"_\"\n              style={{borderColor: this.state.fieldColor[this.state.phoneValid]}}\n              placeholder=\"+7 (___) ___-__-__\" onChange={this.handleAdvertInput} value={this.state.phone}/>\n            <div className=\"hint\">\n              <img src={this.state.icons[this.state.phoneValid]} />\n              <label style={{color: this.state.hintColor[this.state.phoneValid]}}\n                htmlFor=\"newPhone\">{this.state.formErrors[\"phone\"]}</label>\n            </div>\n          </div>\n\n          <div>\n            <button type=\"submit\" className=\"btn btn-primary\">Подать</button>\n          </div>\n\n        </form>\n\n        <div className=\"list\">\n          <ListHeader items={this.state.items} />\n          <TodoList items={this.state.items} deleteAdvert={this.deleteAdvert}/>\n        </div>\n      </div>\n    );\n  }\n\n  handleAdvertInput(e){\n    const name = e.target.name;\n    const value = e.target.value;\n    this.setState({[name]: value});\n  }\n\n  validate() {\n    let validObj = {};\n    validObj.fieldValidationErrors = {};\n    if (!this.state.headline.length) {\n      console.log(this.state.headline.length);\n      validObj.headlineValid = false;\n      validObj.fieldValidationErrors.headline = \"Заполните поле\"\n    } else {\n      validObj.headlineValid = true;\n      validObj.fieldValidationErrors.headline = \"Заполнено\"\n    };\n\n    if (!this.state.text.length) {\n      validObj.textValid = false;\n      validObj.fieldValidationErrors.text = \"Заполните поле\\nНе более 300 символов\"\n    } else {\n      validObj.textValid = true;\n      validObj.fieldValidationErrors.text = \"Заполнено\"\n    };\n\n    if (!this.state.phone.length) {\n      validObj.phoneValid = false;\n      validObj.fieldValidationErrors.phone = \"Заполните поле\"\n    } else if (this.state.phone[17] === '_') {\n      validObj.phoneValid = false;\n      validObj.fieldValidationErrors.phone = \"Неверный формат\"\n    } else {\n      validObj.phoneValid = true;\n      validObj.fieldValidationErrors.phone = \"Заполнено\"\n    }\n    validObj.formValid = validObj.headlineValid && validObj.phoneValid;\n\n    this.setState({ \n        formErrors: validObj.fieldValidationErrors,\n        headlineValid: validObj.headlineValid,\n        textValid: validObj.textValid,\n        phoneValid: validObj.phoneValid,\n        formValid: validObj.formValid\n      });\n\n    return validObj;\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n\n    const validInfo = this.validate();\n\n    console.log(this.state);\n\n    if (!validInfo.formValid) {\n      return;\n    }\n\n    const newItem = {\n      headline: this.state.headline,\n      text: this.state.text,\n      phone: this.state.phone,\n      id: Date.now()\n    };\n\n    var locStorItems = JSON.parse(localStorage[\"items\"]);\n    locStorItems.push(newItem);\n    localStorage[\"items\"] = JSON.stringify(locStorItems);\n\n    this.setState(state => ({\n      // items: state.items.concat(newItem),\n      items: locStorItems,\n      headline: '',\n      text: '',\n      phone: '',\n      formErrors: {\n        headline: 'Обязательное поле\\nНе более 140 символов', \n        text: 'Не более 300 символов', \n        phone: 'Обязательное поле'\n      },\n      headlineValid: '',\n      textValid: '',\n      phoneValid: '',\n      formValid: false\n    }));\n  }\n\n  deleteAdvert(id) {\n    var locStorItems = JSON.parse(localStorage[\"items\"]);\n    var i = locStorItems.length;\n    while(i--){\n      if(locStorItems[i][\"id\"] === id){\n        locStorItems.splice(i,1);\n      }\n    }\n    localStorage[\"items\"] = JSON.stringify(locStorItems);\n    this.setState(state => ({\n      items: locStorItems\n    }));\n  }\n}\n\nclass ListHeader extends React.Component {\n  render() {\n    if (!this.props.items.length) return \"\";\n    return <h3 className=\"header\">Объявление</h3>\n  }\n}\n\nclass TodoList extends React.Component {\n  render() {\n    return (\n      <div>\n        {this.props.items.slice(0).reverse().map(item => (\n          <div key={item.id} className=\"advert\">\n            <div className=\"ad\">\n              <h5>{item.headline}</h5>\n              <p>{item.text}</p>\n            </div>\n            <div className=\"options\">\n              <span><img src={phoneIcon} />{item.phone}</span>\n              <button type=\"submit\" className=\"btn btn-outline-danger\" \n                onClick={() => this.handleDeleteAdvert(item.id)}>Удалить</button>\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  handleDeleteAdvert(id) {\n    this.props.deleteAdvert(id);\n  }\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoApp />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}